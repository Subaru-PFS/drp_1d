// ============================================================================
//
// This file is part of: AMAZED
//
// Copyright  Aix Marseille Univ, CNRS, CNES, LAM/CeSAM
//
// https://www.lam.fr/
//
// This software is a computer program whose purpose is to estimate the
// spectrocopic redshift of astronomical sources (galaxy/quasar/star)
// from there 1D spectrum.
//
// This software is governed by the CeCILL-C license under French law and
// abiding by the rules of distribution of free software.  You can  use,
// modify and/ or redistribute the software under the terms of the CeCILL-C
// license as circulated by CEA, CNRS and INRIA at the following URL
// "http://www.cecill.info".
//
// As a counterpart to the access to the source code and  rights to copy,
// modify and redistribute granted by the license, users are provided only
// with a limited warranty  and the software's author,  the holder of the
// economic rights,  and the successive licensors  have only  limited
// liability.
//
// In this respect, the user's attention is drawn to the risks associated
// with loading,  using,  modifying and/or developing or reproducing the
// software by the user in light of its specific status of free software,
// that may mean  that it is complicated to manipulate,  and  that  also
// therefore means  that it is reserved for developers  and  experienced
// professionals having in-depth computer knowledge. Users are therefore
// encouraged to load and test the software's suitability as regards their
// requirements in conditions enabling the security of their systems and/or
// data to be ensured and,  more generally, to use and operate it in the
// same conditions as regards security.
//
// The fact that you are presently reading this means that you have had
// knowledge of the CeCILL-C license and that you accept its terms.
// ============================================================================
#include "RedshiftLibrary/common/datatypes.h"
#include "RedshiftLibrary/log/consolehandler.h"
#include "RedshiftLibrary/log/filehandler.h"
#include "RedshiftLibrary/method/linemodelsolve.h"
#include "RedshiftLibrary/processflow/context.h"
#include "tests/src/tool/inputContextLight.h"
#include <boost/test/unit_test.hpp>

using namespace NSEpic;

//#define PROFILING

const std::string jsonString =
    "{\"lambdaRange\" : [ 12504, 18507 ],"
    "\"smoothWidth\" : 0.0,"
    "\"templateCatalog\" : {"
    "\"continuumRemoval\" : {"
    "\"method\" : \"zero\","
    "\"medianKernelWidth\" : 75,"
    "\"medianEvenReflection\" : true}},"
    "\"ebmv\" : {\"start\" : 0, \"step\" : 0.1, \"count\" : 10},"
    "\"continuumRemoval\" : {"
    "\"method\" : \"irregularSamplingMedian\","
    "\"medianKernelWidth\" : 400,"
    "\"medianEvenReflection\" : true,"
    "\"decompScales\" : 9},"
    "\"lsf\" : {\"lsfType\" : \"gaussianNISPVSSPSF201707\", "
    "\"sourceSize\" : 0.1},"
    "\"extremaRedshiftSeparation\" : 0.01,"
    "\"spectrumModels\" : [\"galaxy\"],"
    "\"autoCorrectInput\" : false,"
    "\"airVacuumMethod\" : \"default\","
    "\"galaxy\" : {"
    "\"redshiftRange\" : [ 1.0, 2.0 ],"
    "\"redshiftStep\" : 0.0001,"
    "\"redshiftSampling\" : \"log\","
    "\"method\" : \"lineModelSolver\","
    "\"lineModelSolver\" : {"
    "\"lineModel\" : {"
    "\"continuumReestimation\" : \"no\","
    "\"velocityFit\" : true,"
    "\"emVelocityFitMin\" : 10,"
    "\"emVelocityFitMax\" : 700, "
    "\"emVelocityFitStep\" : 20,"
    "\"absVelocityFitMin\" : 150,"
    "\"absVelocityFitMax\" : 500, "
    "\"absVelocityFitStep\" : 50,"
    "\"extremaCount\" : 5,"
    "\"extremaCountB\" : 3,"
    "\"nSigmaSupport\" : 8,"
    "\"hAlphaPrior\" : 0.5,"
    "\"nOfZPriorStrength\" : 1.0,"
    "\"extremaCutProbaThreshold\" : -1,"
    "\"skipSecondPass\" : false,"
    "\"secondPassLcFittingMethod\" : -1,"
    "\"useLogLambdaSampling\": false,"
    "\"lyaForceFit\": false,"
    "\"lyaForceDisableFit\": false,"
    "\"strongLinesPrior\" : 1.0,"
    "\"fittingMethod\": \"individual\","
    "\"lineWidthType\": \"combined\","
    "\"velocityEmission\" : 100,"
    "\"velocityAbsorption\": 100,"
    "\"lineTypeFilter\" : \"no\","
    "\"lineForceFilter\" : \"no\","
    "\"lyaFit\": {"
    "\"asymFitMin\" : 0,"
    "\"asymFitMax\" : 4, \"asymFitStep\" : 1, "
    "\"widthFitMin\" : 1,"
    "\"widthFitMax\" : 4, \"widthFitStep\" : 1, "
    "\"deltaFitMin\" : 0,"
    "\"deltaFitMax\" : 0, \"deltaStepMax\" : 1}, "
    "\"tplRatio\": { \"priors\": {"
    "\"betaA\" : 1,    \"betaTE\" : 1, \"betaZ\" : 1, "
    "\"catalogDirPath\" : \"\"}}, "
    "\"firstPass\": { \"fittingMethod\" : \"individual\", "
    "\"tplRatioIsmFit\" : true,"
    "\"largeGridStepRatio\" : 10, "
    "\"multipleContinuumFitDisable\": true},"
    "\"secondPass\" : {\"halfWindowSize\" : 0.001, "
    "\"continuumFit\" : \"reFitFirstPass\"},"
    "\"continuumComponent\" : \"tplFit\","
    "\"pdfCombination\" : \"marg\","
    "\"tplRatioIsmFit\" : true,"
    "\"rules\" : \"all\","
    "\"improveBalmerFit\" : true,"
    "\"lineRatioType\": \"tplRatio\","
    "\"enablePhotometry\" : false, "
    "\"photometry\" : {\"weight\" : 1},"
    "\"continuumFit\" : { \"ignoreLineSupport\": false,"
    "\"negativeThreshold\": -5.0,"
    "\"count\" : 1,"
    "\"nullThreshold\": 3,"
    "\"ismFit\" : true,"
    "\"igmFit\" : true,"
    "\"fftProcessing\": false, "
    "\"priors\": { \"betaA\" : 1, \"betaTE\" : 1, \"betaZ\" : 1,"
    "\"catalogDirPath\" : \"\"}}}}}}";

const std::string sep8 =
    "{"
    "    \"multiObsMethod\": \"\","
    "    \"lambdaRange\": ["
    "	12510,"
    "        18500],"
    "    \"smoothWidth\": 0.0,"
    "    \"templateCatalog\": {"
    "        \"continuumRemoval\": {"
    "            \"method\": \"zero\","
    "            \"medianKernelWidth\": 75,"
    "            \"medianEvenReflection\": true"
    "        }"
    "    },"
    "    \"ebmv\": {"
    "        \"start\": 0,"
    "        \"step\": 0.1,"
    "        \"count\": 10"
    "    },"
    "    \"continuumRemoval\": {"
    "        \"method\": \"irregularSamplingMedian\","
    "        \"medianKernelWidth\": 400,"
    "        \"medianEvenReflection\": true"
    "    },"
    "    \"lsf\": {"
    "        \"lsfType\": \"gaussianConstantResolution\","
    "        \"resolution\": 4300"
    "    },"
    "    \"extremaRedshiftSeparation\": 0.01,"
    "    \"spectrumModels\": ["
    "        \"galaxy\""
    "    ],"
    "    \"autoCorrectInput\": false,"
    "    \"galaxy\": {"
    "        \"redshiftRange\": ["
    "            0.01,"
    "            6.0"
    "        ],"
    "        \"redshiftStep\": 0.0001,"
    "        \"redshiftSampling\": \"log\","
    "        \"method\": \"lineModelSolver\","
    "        \"templateDir\": \"templates/BC03_sdss_tremonti21\","
    "        \"lineModelSolver\": {"
    "            \"lineModel\": {"
    "                \"lineCatalog\": "
    "\"lineCatalogs/linecatalogamazedvacuum_H0.tsv\","
    "                \"lineTypeFilter\": \"no\","
    "                \"lineForceFilter\": \"no\","
    "                \"fittingMethod\": \"individual\","
    "                \"ampOffsetFit\":false,"
    "                \"lbdaOffsetFit\":false,"
    "                \"igmFit\": false,"
    "                \"lineWidthType\": \"combined\","
    "                \"velocityEmission\": 100,"
    "                \"velocityAbsorption\": 100,"
    "                \"velocityFit\": true,"
    "                \"pdfCombination\": \"marg\","
    "                \"emVelocityFitMin\": 10,"
    "                \"emVelocityFitMax\": 400,"
    "                \"emVelocityFitStep\": 2,"
    "                \"absVelocityFitMin\": 150,"
    "                \"absVelocityFitMax\": 500,"
    "                \"absVelocityFitStep\": 50,"
    "                \"lyaForceFit\": false,"
    "                \"lyaForceDisableFit\": false,"
    "                \"lyaFit\": {"
    "                    \"asymFitMin\": 0,"
    "                    \"asymFitMax\": 4,"
    "                    \"asymFitStep\": 1,"
    "                    \"widthFitMin\": 1,"
    "                    \"widthFitMax\": 4,"
    "                    \"widthFitStep\": 1,"
    "                    \"deltaFitMin\": 0,"
    "                    \"deltaFitMax\": 0,"
    "                    \"deltaStepMax\": 1"
    "                },"
    "                \"extremaCountB\": 0,"
    "                \"hAlphaPrior\": -1,"
    "                \"lineRatioType\": \"tplRatio\","
    "                \"rules\": \"all\","
    "                \"improveBalmerFit\": true,"
    "                \"tplRatioCatalog\": "
    "\"lineCatalogs_tplshapes/"
    "lineCatalogs_tplshape_ExtendedTemplatesJan2017v3_20170602_B14C_v16_"
    "emission\","
    "                \"tplRatioIsmFit\": false,"
    "                \"continuumComponent\": \"fromSpectrum\","
    "                \"continuumReestimation\": \"no\","
    "                \"continuumFit\": {"
    "                    \"negativeThreshold\": -5.0,"
    "                    \"nullThreshold\": 3,"
    "                    \"fftProcessing\": true,"
    "                    \"ismFit\": true,"
    "                    \"igmFit\": true,"
    "                    \"count\": 1,"
    "                    \"ignoreLineSupport\": false,"
    "                    \"priors\": {"
    "                        \"betaA\": 1,"
    "                        \"betaTE\": 1,"
    "                        \"betaZ\": 1,"
    "                        \"catalogDirPath\": \"\""
    "                    }"
    "                },"
    "                \"useLogLambdaSampling\": false,"
    "                \"skipSecondPass\": false,"
    "                \"extremaCount\": 5,"
    "                \"extremaCutProbaThreshold\": -1,"
    "                \"pdf\": {"
    "                    \"margAmpCorr\": false,"
    "                    \"bestZOption\": \"maxIntProba\""
    "                },"
    "                \"firstPass\": {"
    "                    \"fittingMethod\": \"individual\","
    "                    \"largeGridStepRatio\": 5,"
    "                    \"tplRatioIsmFit\": false,"
    "                    \"multipleContinuumFitDisable\": true"
    "                },"
    "                \"secondPass\": {"
    "                    \"halfWindowSize\": 0.001,"
    "                    \"continuumFit\": \"reFitFirstPass\""
    "                },"
    "                \"secondPassLcFittingMethod\": -1,"
    "                \"strongLinesPrior\": -1,"
    "                \"nOfZPriorStrength\": -1,"
    "                \"tplRatio\": {"
    "                    \"priors\": {"
    "                        \"betaA\": 1,"
    "                        \"betaTE\": 1,"
    "                        \"betaZ\": 1,"
    "                        \"catalogDirPath\": \"\""
    "                    }"
    "                },"
    "                \"nSigmaSupport\": 8,"
    "                \"enablePhotometry\": false"
    "            }"
    "        },"
    "        \"linemeas_method\": null,"
    "        \"enable_reliability\": false"
    "    },"
    "    \"airVacuumMethod\": \"default\""
    "}";

class fixture_LineModelSolveTest {
public:
  fixture_Context ctx;
  TScopeStack scopeStack;
  std::shared_ptr<CSpectrumFluxCorrectionMeiksin> igmCorrectionMeiksin =
      fixture_MeiskinCorrection().igmCorrectionMeiksin;
  std::shared_ptr<CSpectrumFluxCorrectionCalzetti> ismCorrectionCalzetti =
      fixture_CalzettiCorrection().ismCorrectionCalzetti;
  std::shared_ptr<CLSF> LSF =
      fixture_LSFGaussianConstantResolution(scopeStack).LSF;
  std::shared_ptr<CSpectrum> spc = fixture_SharedSpectrumFull().spc;
  std::shared_ptr<CTemplateCatalog> catalog =
      fixture_sharedTemplateCatalog().catalog;
  std::shared_ptr<CPhotBandCatalog> photoBandCatalog =
      fixture_PhotoBandCatalog().photoBandCatalog;
  std::shared_ptr<CPhotometricData> photoData = fixture_PhotoData().photoData;
  std::shared_ptr<CLineCatalogsTplRatio> lineRatioTplCatalog =
      fixture_LineRatioTplCatalog().lineRatioTplCatalog;
  // std::shared_ptr<CLineRatioCatalog> lineRatioCatalogA =
  //     fixture_LineRatioCatalogA().lineRatioCatalogA;
  // std::shared_ptr<CLineRatioCatalog> lineRatioCatalogB =
  //     fixture_LineRatioCatalogB().lineRatioCatalogB;
  std::shared_ptr<CLineCatalog> lineCatalog =
      fixture_FullLineCatalog().lineCatalog;

  void fillCatalog() {
    catalog->Add(fixture_SharedGalaxyTemplate().tpl3);
    catalog->Add(fixture_SharedGalaxyTemplate().tpl3);
  }
};

class fixture_LineModelSolveTestTplFitTplRatio
    : public fixture_LineModelSolveTest {
public:
  fixture_LineModelSolveTestTplFitTplRatio() {
    fillCatalog();
    ctx.loadParameterStore(sep8);
    ctx.setCorrections(igmCorrectionMeiksin, ismCorrectionCalzetti);
    ctx.setCatalog(catalog);
    ctx.setPhotoBandCatalog(photoBandCatalog);
    spc->SetPhotData(photoData);
    ctx.addSpectrum(spc, LSF);
    ctx.setLineRatioCatalogCatalog("galaxy", lineRatioTplCatalog);
    ctx.setLineCatalog("galaxy", "lineModelSolver", lineCatalog);
    ctx.initContext();
    // lineRatioTplCatalog->addLineRatioCatalog(*lineRatioCatalogA);
    // lineRatioTplCatalog->addLineRatioCatalog(*lineRatioCatalogB);
  }
};

/* int main() {
  // CLogConsoleHandler console_handler;
  // console_handler.SetLevelMask(70);

  bfs::path logFile = bfs::unique_path("log_8b7e0ea2.txt");

  // Add consoleHandler to the log
  CLogFileHandler file_handler(logFile.c_str());
  file_handler.SetLevelMask(70);

  fixture_LineModelSolveTestTplFitTplRatio fix;
  CLineModelSolve lineModelSolver(Context.m_ScopeStack, "galaxy");
#ifdef PROFILING
  lineModelSolver.Compute();
#endif
  return 0;
}
 */

BOOST_AUTO_TEST_SUITE(lineModelSolve_main_test)

BOOST_FIXTURE_TEST_CASE(main_test, fixture_LineModelSolveTestTplFitTplRatio,
                        *boost::unit_test::disabled()) {}

BOOST_AUTO_TEST_SUITE_END()