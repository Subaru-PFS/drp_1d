stages:
  - build
  - test
  - build-wheel
  - python-test
  - build-coverage
  - pytest-coverage
  - sonar
  - push-rc
  - deploy
  
variables:
  TWINE_USERNAME: gitlab-ci-token
  TWINE_PASSWORD: $CI_JOB_TOKEN
  TWINE_REPOSITORY_URL: https://gitlab.lam.fr/api/v4/projects/${CI_PROJECT_ID}/packages/pypi
  IMAGE_BUILD_DIR: $CI_REGISTRY/cpf/docker_builds
  SONARQUBE_URL: https://sonarqube.lam.fr
  DOC_VERSION: ""
  CCACHE_BASEDIR: $CI_PROJECT_DIR
  CCACHE_DIR: $CI_PROJECT_DIR/ccache

# Specific Rules
.trigger-rules:
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: always
    - if: $CI_COMMIT_BRANCH != $CI_DEFAULT_BRANCH
      when: manual

# OSX Stages
build-osx:
  stage: build
  tags:
    - osx
  when: manual
  script:
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR
    - make -j 2
    - make install
  cache:
    key: "osx-$CI_COMMIT_REF_SLUG"
    policy: push
    untracked: true

test-osx:
  stage: test
  tags:
    - osx
  when: manual
  allow_failure: true
  script:
    - cd build
    - make test
  cache:
    key: "osx-$CI_COMMIT_REF_SLUG"
    policy: pull
    untracked: true

.wheel-osx:
  stage: build-wheel
  tags:
    - osx
  when: manual
  script:
    - source /Users/grunner/venv/amazed$PYTHON_VERSION/bin/activate
    - pip wheel --wheel-dir dist .
    - delocate-wheel -w wheel/ dist/pylibamazed-*-cp$PYTHON_VERSION-*.whl
    - pip install wheel/pylibamazed-*-cp$PYTHON_VERSION-*.whl
    - cd /
    - python -c "import pylibamazed; import pkg_resources; print(pkg_resources.get_distribution('pylibamazed').version)"
    - python -c "from pylibamazed.redshift import get_version ; print(get_version())"
  after_script:
    - source /Users/grunner/venv/amazed$PYTHON_VERSION/bin/activate
    - pip uninstall -y pylibamazed
  artifacts:
    paths:
      - wheel/
    expire_in: 1 week
  cache:
    key: "osx-$CI_COMMIT_REF_SLUG"
    policy: pull
    untracked: true

wheel37-osx:
  variables:
    PYTHON_VERSION: "37"
  extends:
    - .wheel-osx

wheel38-osx:
  variables:
    PYTHON_VERSION: "38"
  extends:
    - .wheel-osx

.push-rc-osx:
  stage: push-rc
  tags:
    - osx
  when: manual
  before_script:
    - source /Users/grunner/venv/amazed$PYTHON_VERSION/bin/activate
    - pip install twine
  script:
    - twine upload --repository-url $TWINE_REPOSITORY_URL --verbose --skip-existing --disable-progress-bar wheel/pylibamazed-*-cp$PYTHON_VERSION-*.whl
  cache:
    key: "osx-$CI_COMMIT_REF_SLUG"
    policy: pull
    untracked: true

push-rc-37-osx:
  variables:
    PYTHON_VERSION: "37"
  extends:
    - .push-rc-osx
  dependencies:
    - wheel37-osx

push-rc-38-osx:
  variables:
    PYTHON_VERSION: "38"
  extends:
    - .push-rc-osx
  dependencies:
    - wheel38-osx

# Linux stages
.build-linux:
  stage: build
  script:
    - source /venv/p39/bin/activate
    - if [ "$ENABLE_GCC10" == "True" ]; then source /opt/rh/devtoolset-10/enable; fi
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_PREFIX_PATH=/root/local -DCMAKE_INSTALL_PREFIX=$CI_PROJECT_DIR
    - make -j 12
    - make install
  after_script:
    - ccache --show-stats
  cache:
    key : build-key
    paths :
      - ccache/
    policy: push
    #untracked: true


.build-coverage-linux:
  stage: build-coverage
  script:
    - source /venv/p39/bin/activate
    - if [ "$ENABLE_GCC10" == "True" ]; then source /opt/rh/devtoolset-10/enable; fi
    - mkdir -p build
    - cd build
    - cmake .. -DCMAKE_BUILD_TYPE=Debug -DCMAKE_PREFIX_PATH=/root/local -DCMAKE_CXX_FLAGS="-O0 -fprofile-arcs -ftest-coverage --coverage"
    - make -j 12
    - make test
    - gcovr --filter=../RedshiftLibrary/src/lib/ --filter=../RedshiftLibrary/RedshiftLibrary --xml-pretty --exclude-unreachable-branches --print-summary -o coverage.xml --root ${CI_PROJECT_DIR}
    - gcovr --filter=../RedshiftLibrary/src/lib/ --filter=../RedshiftLibrary/RedshiftLibrary --html -o index.html --root .
  coverage: /^\s*lines:\s*\d+.\d+\%/
  artifacts:
    paths:
      - build/coverage.xml
      - build/index.html
    expire_in: 1 week
    reports:
      coverage_report:
        coverage_format: cobertura
        path: build/coverage.xml

.test-linux:
  stage: test
  script:
    - cd build
    - make test
  cache:
    policy: pull
    untracked: true

.wheel-linux:
  stage: build-wheel
  script:
    - source /venv/p$PYTHON_VERSION/bin/activate
    - python -m build -C build-dir=build -C cmake.define.CMAKE_PREFIX_PATH=/root/local -C cmake.define.BUILD_TESTING=OFF
    - ccache --show-stats
    - auditwheel repair dist/pylibamazed-*-cp$PYTHON_VERSION-*.whl -w wheel --plat $PLATFORM
    - pip install wheel/pylibamazed-*-cp$PYTHON_VERSION-*$PLATFORM.whl
    - python -c "import pylibamazed; import importlib.metadata; print(importlib.metadata.version('pylibamazed'))"
    - cd /
    - python -c "from pylibamazed.redshift import get_version ; print(get_version())"
  after_script:
    - source /venv/p$PYTHON_VERSION/bin/activate
    - pip uninstall -y pylibamazed
  artifacts:
    paths:
      - wheel/
    expire_in: 1 week
  cache:
    key : build-key
    paths :
      - ccache/    
    policy: pull
    #untracked: true

.pytest-linux:
  stage: python-test
  script:
    - source /venv/p$PYTHON_VERSION/bin/activate
    - pip install wheel/pylibamazed-*-cp$PYTHON_VERSION-*$PLATFORM.whl
    - pytest
  after_script:
    - source /venv/p$PYTHON_VERSION/bin/activate
    - pip uninstall -y pylibamazed
  cache:
    policy: pull
    untracked: true

.pytest-coverage-linux:
  stage: pytest-coverage
  script:
    - source /venv/p$PYTHON_VERSION/bin/activate
    - pip install wheel/pylibamazed-*-cp$PYTHON_VERSION-*$PLATFORM.whl
    - cd pylibamazed
    - coverage run --source=pylibamazed -m pytest
    - coverage report
    - coverage xml
    - sed -i 's@/venv/p'"$PYTHON_VERSION"'/lib/python3.9/site-packages@pylibamazed/python@g' coverage.xml
  after_script:
    - source /venv/p$PYTHON_VERSION/bin/activate
    - pip uninstall -y pylibamazed
  coverage: /TOTAL.*? (100(?:\.0+)?\%|[1-9]?\d(?:\.\d+)?\%)$/
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: pylibamazed/coverage.xml
  cache:
    policy: pull
    untracked: true

.push-rc-linux:
  stage: push-rc
  when: manual
  script:
    - source /venv/p$PYTHON_VERSION/bin/activate
    - twine upload --repository-url $TWINE_REPOSITORY_URL --verbose --disable-progress-bar wheel/pylibamazed-*-cp$PYTHON_VERSION-*$PLATFORM.whl
  cache:
    policy: pull
    untracked: true

.sonar-linux:
  stage: sonar
  when: manual
  allow_failure: true
  before_script:
    - export VERSION=`cat VERSION`
  script:
    - sonar-scanner
        -Dsonar.projectKey=${CI_PROJECT_NAME}
        -Dsonar.language=c++
        -Dsonar.cxx.file.suffixes=.cpp,.h
        -Dsonar.sources=RedshiftLibrary/src/lib
        -Dsonar.cxx.includeDirectories=RedshiftLibrary/RedshiftLibrary
        -Dsonar.cxx.forceIncludes=RedshiftLibrary/RedshiftLibrary
        -Dsonar.projectVersion=$VERSION
        -Dsonar.host.url=$SONARQUBE_URL
        -Dsonar.login=$SONAR_TOKEN
        -Dsonar.exclusions=*.xml
        -Dsonar.cxx.coverage.reportPath=build/coverage.xml

.pages-linux:
  stage: deploy
  script:
    - source /venv/p$PYTHON_VERSION/bin/activate
    - pip install -r pip-doc-requirements.txt
    - generate-schema-doc --config template_name=md pylibamazed/auxdir/pylibamazed/jsonschema-v2 pylibamazed/doc/source/json-schema/
    - sphinx-build -b html pylibamazed/doc/source public/$DOC_VERSION
  artifacts:
    paths:
    - public
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      variables:
        DOC_VERSION: $CI_DEFAULT_BRANCH


# Manylinux2014 stages
.manylinux2014:
  image: $IMAGE_BUILD_DIR/amazed-manylinux2014-9270
  when: manual
  variables:
    PLATFORM: "manylinux2014_x86_64"
    ENABLE_GCC10: "False"
  cache:
    key: "manylinux2014-$CI_COMMIT_REF_SLUG"

build-manylinux2014:
  extends:
    - .manylinux2014
    - .build-linux

test-manylinux2014:
  extends:
    - .manylinux2014
    - .test-linux

wheel39-manylinux2014:
  variables:
    PYTHON_VERSION: "39"
  extends:
    - .manylinux2014
    - .wheel-linux

wheel311-manylinux2014:
  variables:
    PYTHON_VERSION: "311"
  when: manual
  extends:
    - .manylinux2014
    - .wheel-linux

wheel312-manylinux2014:
  variables:
    PYTHON_VERSION: "312"
  when: manual
  extends:
    - .manylinux2014
    - .wheel-linux

wheel313-manylinux2014:
  variables:
    PYTHON_VERSION: "313"
  when: manual
  extends:
    - .manylinux2014
    - .wheel-linux

pytest39-manylinux2014:
  variables:
    PYTHON_VERSION: "39"
  extends:
    - .manylinux2014
    - .pytest-linux

pytest311-manylinux2014:
  variables:
    PYTHON_VERSION: "311"
  when: manual
  extends:
    - .manylinux2014
    - .pytest-linux

pytest312-manylinux2014:
  variables:
    PYTHON_VERSION: "312"
  when: manual
  extends:
    - .manylinux2014
    - .pytest-linux

pytest313-manylinux2014:
  variables:
    PYTHON_VERSION: "313"
  when: manual
  extends:
    - .manylinux2014
    - .pytest-linux

pytest39-coverage-manylinux2014: 
  rules :
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $COVERAGE == "true"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: manual
  variables:
    PYTHON_VERSION: "39"
  allow_failure: true
  extends:
    - .manylinux2014
    - .pytest-coverage-linux

pytest311-coverage-manylinux2014:
  variables:
    PYTHON_VERSION: "311"
  when: manual
  extends:
    - .manylinux2014
    - .pytest-coverage-linux

pytest312-coverage-manylinux2014:
  variables:
    PYTHON_VERSION: "312"
  when: manual
  extends:
    - .manylinux2014
    - .pytest-coverage-linux

pytest313-coverage-manylinux2014:
  variables:
    PYTHON_VERSION: "313"
  when: manual
  extends:
    - .manylinux2014
    - .pytest-coverage-linux

push-rc-39-manylinux2014:
  variables:
    PYTHON_VERSION: "39"
  extends:
    - .manylinux2014
    - .push-rc-linux
  dependencies:
    - wheel39-manylinux2014

push-rc-311-manylinux2014:
  variables:
    PYTHON_VERSION: "311"
  extends:
    - .manylinux2014
    - .push-rc-linux
  dependencies:
    - wheel311-manylinux2014

push-rc-312-manylinux2014:
  variables:
    PYTHON_VERSION: "312"
  extends:
    - .manylinux2014
    - .push-rc-linux
  dependencies:
    - wheel312-manylinux2014

push-rc-313-manylinux2014:
  variables:
    PYTHON_VERSION: "313"
  extends:
    - .manylinux2014
    - .push-rc-linux
  dependencies:
    - wheel313-manylinux2014

coverage-manylinux2014:
  rules :
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
    - if: $COVERAGE == "true"
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: manual
  allow_failure: true
  extends:
    - .manylinux2014
    - .build-coverage-linux

sonar-scanner-manylinux2014:
  extends:
    - .manylinux2014
    - .sonar-linux
  dependencies:
    - coverage-manylinux2014

pages:
  variables:
    PYTHON_VERSION: "39"
  extends:
    - .manylinux2014
    - .pages-linux

# Manylinux_2_28 stages
.manylinux_2_28:
  image: $IMAGE_BUILD_DIR/amazed-manylinux_2_28
  when: manual
  variables:
    PLATFORM: "linux_x86_64"
    ENABLE_GCC10: "True"
  cache:
    key: "manylinux_2_28-$CI_COMMIT_REF_SLUG"

build-manylinux_2_28:
  extends:
    - .manylinux_2_28
    - .build-linux

test-manylinux_2_28:
  extends:
    - .manylinux_2_28
    - .test-linux

wheel38-manylinux_2_28:
  variables:
    PYTHON_VERSION: "38"
  extends:
    - .manylinux_2_28
    - .wheel-linux

wheel39-manylinux_2_28:
  variables:
    PYTHON_VERSION: "39"
  extends:
    - .manylinux_2_28
    - .wheel-linux

wheel311-manylinux_2_28:
  variables:
    PYTHON_VERSION: "311"
  extends:
    - .manylinux_2_28
    - .wheel-linux

pytest38-manylinux_2_28:
  variables:
    PYTHON_VERSION: "38"
  extends:
    - .manylinux_2_28
    - .pytest-linux

pytest39-manylinux_2_28:
  variables:
    PYTHON_VERSION: "39"
  extends:
    - .manylinux_2_28
    - .pytest-linux

pytest311-manylinux_2_28:
  variables:
    PYTHON_VERSION: "311"
  extends:
    - .manylinux_2_28
    - .pytest-linux

pytest38-coverage-manylinux_2_28:
  variables:
    PYTHON_VERSION: "38"
  extends:
    - .manylinux_2_28
    - .pytest-coverage-linux

pytest39-coverage-manylinux_2_28: 
  variables:
    PYTHON_VERSION: "39"
  extends:
    - .manylinux_2_28
    - .pytest-coverage-linux

pytest311-coverage-manylinux_2_28:
  variables:
    PYTHON_VERSION: "311"
  extends:
    - .manylinux_2_28
    - .pytest-coverage-linux

push-rc-38-manylinux_2_28:
  variables:
    PYTHON_VERSION: "38"
  extends:
    - .manylinux_2_28
    - .push-rc-linux
  dependencies:
    - wheel38-manylinux_2_28

push-rc-39-manylinux_2_28:
  variables:
    PYTHON_VERSION: "39"
  extends:
    - .manylinux_2_28
    - .push-rc-linux
  dependencies:
    - wheel39-manylinux_2_28

push-rc-311-manylinux_2_28:
  variables:
    PYTHON_VERSION: "311"
  extends:
    - .manylinux_2_28
    - .push-rc-linux
  dependencies:
    - wheel311-manylinux_2_28

coverage-manylinux_2_28:
  extends:
    - .manylinux_2_28
    - .build-coverage-linux

sonar-scanner-manylinux_2_28:
  extends:
    - .manylinux_2_28
    - .sonar-linux
  dependencies:
    - coverage-manylinux_2_28

# Rockylinux9 stages (euclid-like)
.rockylinux:
  image: $IMAGE_BUILD_DIR/euclid-rockylinux-9
  when: manual
  variables:
    PLATFORM: "linux_x86_64"
    ENABLE_GCC10: "False"
  cache:
    key: "rockylinux-$CI_COMMIT_REF_SLUG"

build-rockylinux:
  extends:
    - .rockylinux
    - .build-linux

test-rockylinux:
  extends:
    - .rockylinux
    - .test-linux

wheel39-rockylinux:
  variables:
    PYTHON_VERSION: "39"
  extends:
    - .rockylinux
    - .wheel-linux

pytest39-rockylinux:
  variables:
    PYTHON_VERSION: "39"
  extends:
    - .rockylinux
    - .pytest-linux

pytest39-coverage-rockylinux:
  variables:
    PYTHON_VERSION: "39"
  extends:
    - .rockylinux
    - .pytest-coverage-linux

push-rc-39-rockylinux:
  variables:
    PYTHON_VERSION: "39"
  extends:
    - .rockylinux
    - .push-rc-linux
  dependencies:
    - wheel39-rockylinux

coverage-rockylinux:
  extends:
    - .rockylinux
    - .build-coverage-linux

sonar-scanner-rockylinux:
  extends:
    - .rockylinux
    - .sonar-linux
  dependencies:
    - coverage-rockylinux

