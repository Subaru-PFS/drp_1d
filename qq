[1mdiff --git a/tools/aview/catalog.py b/tools/aview/catalog.py[m
[1mindex 1d3e8c1..105a81b 100644[m
[1m--- a/tools/aview/catalog.py[m
[1m+++ b/tools/aview/catalog.py[m
[36m@@ -157,7 +157,7 @@[m [mclass Catalog(object):[m
         return a[m
         [m
     def plot(self): [m
[31m-        shiftedctlg = c.getShiftedCatalog(0.0, "A", -1)[m
[32m+[m[32m        shiftedctlg = self.getShiftedCatalog(0.0, "A", -1)[m
         #print(shiftedctlg)[m
         self.linesx = shiftedctlg['lambda'][m
         self.linesxrest = shiftedctlg['lambdarest'][m
[36m@@ -181,7 +181,25 @@[m [mclass Catalog(object):[m
         pp.title(self.name) # Titre[m
         #pp.savefig('ExempleTrace') # sauvegarde du fichier ExempleTrace.png[m
         pp.show()[m
[32m+[m[41m        [m
     [m
[32m+[m[32m    def plotNominalAmpsAsModelResult(self, name="catalog", exportPath=""):[m[41m [m
[32m+[m[32m        #create temp catalog file[m
[32m+[m[32m        tmpFilePath = '/tmp/{}.txt'.format(name)[m[41m [m
[32m+[m[32m        f = open(tmpFilePath, 'w')[m
[32m+[m[32m        f.write("#linemodel solution 0 for z = 0.0, velocityEmission = 100.000000, velocityAbsorption = 100.000000, merit = 100.0{\n")[m
[32m+[m[32m        hdrStr = "#type	#force	#Name_____________	#elt_ID	#lambda_rest	#amp_____	#err_____	#err_fit_____\n"[m
[32m+[m[32m        f.write(hdrStr)[m
[32m+[m[41m        [m
[32m+[m[32m        for k in range(len(self.linelambda)):[m
[32m+[m[32m            lStr = "{}\t{}\t{}\t{}\t{}\t{}\t{}\t{}\t".format(self.linetype[k], self.lineforce[k], self.linename[k], k, self.linelambda[k], self.linenominalamp[k], -1, -1 )[m
[32m+[m[32m            f.write("{}\n".format(lStr))[m[41m            [m
[32m+[m[32m        f.close()[m
[32m+[m[41m        [m
[32m+[m[32m        mres = modelresult.ModelResult(tmpFilePath)[m
[32m+[m[32m        mres.plot(exportPath=exportPath)[m
[32m+[m
[32m+[m[41m        [m
     def plotInZplane(self):[m
         if 0:[m
             #EUCLID[m
[36m@@ -389,6 +407,21 @@[m [mclass Catalog(object):[m
         #outpath = os.path.join(path,name)[m
         #self.save(outpath)[m
             [m
[32m+[m[32m    def applyShapeFromDictionnary(self, dictionnary):[m
[32m+[m[41m        [m
[32m+[m[32m        for x in range(0,self.n):[m
[32m+[m[32m            self.linenominalamp[x] = 0.0[m
[32m+[m[41m            [m
[32m+[m[32m        for x in range(0,self.n):[m
[32m+[m[32m            self.linegroup[x] = "shape"[m
[32m+[m[32m            a = dictionnary[self.linename[x]][m
[32m+[m[32m            #print("amp in dictionnary for {} is : {}".format(self.linename[x], a))[m
[32m+[m[32m            if np.isnan(a):[m
[32m+[m[32m                a = 0.0[m
[32m+[m[32m            #print("using : {}".format(a))[m
[32m+[m[32m            self.linenominalamp[x] = a[m
[32m+[m[32m            self.lineprofile[x] = "SYM"[m[41m            [m
[32m+[m[41m            [m
     def getComparisonDistance(self, otherCatalog):[m
         if not otherCatalog.n == self.n:[m
             print("Error: the catalogs must be the same size")[m
[36m@@ -421,6 +454,7 @@[m [mdef StartFromCommandLine( argv ) :[m
         [m
         #c.plot()[m
         #c.plotInZplane()  [m
[32m+[m[32m        c.plotNominalAmpsAsModelResult()[m
         [m
         #print("the REDMINE (copy/paste) generated table is:\n{}".format(c.getRedmineTableString()))[m
         #print("the LATEX (copy/paste) generated table is:\n{}".format(c.getLatexTableString()))[m
[1mdiff --git a/tools/aview/modelresult.py b/tools/aview/modelresult.py[m
[1mindex bc75c6a..82db524 100644[m
[1m--- a/tools/aview/modelresult.py[m
[1m+++ b/tools/aview/modelresult.py[m
[36m@@ -120,7 +120,7 @@[m [mclass ModelResult(object):[m
         text_file.close()             [m
     [m
         [m
[31m-    def plot(self, plotType='amplitudes'):[m
[32m+[m[32m    def plot(self, plotType='amplitudes', exportPath=""):[m
         [m
         #plotValue = self.lineerror [m
         if plotType=='amplitudes':[m
[36m@@ -188,7 +188,7 @@[m [mclass ModelResult(object):[m
         [m
         if enableYRescaleAuto:[m
             pp.ylim([-plotrange*amax/aemax - 500, plotrange*emax/aemax + 500])[m
[31m-        if 1:[m
[32m+[m[32m        if 0:[m
             valf = ymarginValue*3.0[m
             pp.ylim([-valf, valf])[m
             [m
[36m@@ -198,8 +198,11 @@[m [mclass ModelResult(object):[m
         pp.ylabel('{} (x{:.3})'.format(ylabelStr, coeffAmp))[m
         titleStr = "{} at z={}".format(self.name, self.z)[m
         pp.title(titleStr) # Titre[m
[31m-        #pp.savefig('ExempleTrace') # sauvegarde du fichier ExempleTrace.png[m
[31m-        pp.show()[m
[32m+[m[32m        if exportPath=="":[m
[32m+[m[32m            pp.show()[m
[32m+[m[32m        else:[m
[32m+[m[32m            pp.savefig("{}".format(exportPath))[m
[32m+[m[41m            [m
 [m
     def randomAmplitudes(self, coeffE=1.0, coeffA=0.5):[m
 	#coeffE = continuum independent value: this is the 'SFR=100.0' line amplitude[m
[1mdiff --git a/tools/aview/resparser.py b/tools/aview/resparser.py[m
[1mindex 1787d05..2637741 100644[m
[1m--- a/tools/aview/resparser.py[m
[1m+++ b/tools/aview/resparser.py[m
[36m@@ -613,7 +613,12 @@[m [mclass ResParser(object):[m
                         forceTplAmplitudes.append(1.0)[m
                         forceTplDoNotRedShifts.append(1)[m
                         meritsExtrema.append(chi_linemodel.getMeritExtremum(idx_model))[m
[31m-                        tplcorrTplnameExtrema.append(chi_linemodel.amazed_FittedTplcorrTplName[idx_model])[m
[32m+[m[32m                        try:[m
[32m+[m[32m                            tplcorrTplnameExtrema.append(chi_linemodel.amazed_FittedTplcorrTplName[idx_model])[m
[32m+[m[32m                        except:[m
[32m+[m[32m                            tplcorrTplnameExtrema.append("")[m
[32m+[m[41m                            [m
[32m+[m[41m                            [m
                 [m
                 #create the outputs[m
                 d = {}[m
